{"version":3,"sources":["components/live-tracking/LiveTracking.js"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","LiveTracking","classes","useState","localStorage","getItem","previous_devices","setPreviousDevices","devices","setDevices","getBearing","index","lat1","Number","lat","lat2","lng_distance","lng","X","Math","cos","sin","Y","atan2","PI","React","useEffect","interval","setInterval","PUBLIC_API","get","then","res","setItem","data","clearInterval","className","length","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Array","from","map","device","idx","Marker","position","icon","Icon","iconUrl","sos","markerIconPng","iconSize","iconAnchor","Popup","device__device_id","battery","signal_strength1","signal_strength2","speed","sim_no","locked_satellite","LinearProgress"],"mappings":"+QAYMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,QAAS,OACTC,eAAgB,cAuETC,UAnEM,WACjB,IAAMC,EAAUP,IAEhB,EAA+CQ,mBAASC,aAAaC,QAAQ,oBAAoBD,aAAaC,QAAQ,oBAAoB,IAA1I,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA0BN,mBAAS,GAAnC,6BAsBA,SAASO,EAAWC,GAChB,IAAIC,EAAOC,OAAOP,EAAiBK,GAAOG,KACtCC,EAAOF,OAAOL,EAAQG,GAAOG,KAC7BE,EAAeH,OAAOL,EAAQG,GAAOM,KAAMJ,OAAOP,EAAiBK,GAAOM,KACxEC,EAAKC,KAAKC,IAAIR,GAAQO,KAAKE,IAAIL,GAC/BM,EAAIH,KAAKC,IAAIL,GAAQI,KAAKE,IAAIT,GAAQO,KAAKE,IAAIN,GAAQI,KAAKC,IAAIR,GAAQO,KAAKC,IAAIJ,GAEvF,OAAc,IADJG,KAAKI,MAAML,EAAEI,GACHH,KAAKK,GAAM,KAAO,IAM1C,OAlCAC,IAAMC,WAAU,WACZ,IAAMC,EAAWC,aAAY,WACzBC,IAAWC,IAAI,qBAAqBC,MAAK,SAACC,GACtC5B,aAAa6B,QAAQ,mBAAoBzB,GACzCD,EAAmBC,GACnBC,EAAWuB,EAAIE,KAAKA,WAEzB,KACH,OAAO,kBAAMC,cAAcR,OA2B3B,mCACI,qBAAKS,UAAWlC,EAAQJ,KAAxB,SACI,cAAC,IAAD,UACKU,EAAQ6B,OAAS,EAAI,cAAC,IAAD,CAAMD,UAAU,yBAAhB,SAClB,cAAC,IAAD,UACI,eAACE,EAAA,EAAD,CAAcC,OAAQ,CAAC,OAAS,SAAUC,KAAM,EAAGC,iBAAiB,EAApE,UACI,cAACC,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAEPpC,EAAQ6B,OAAS,GAAKQ,MAAMC,KAAKtC,GAASuC,KAAI,SAACC,EAAQC,GAAT,OAC3C,cAACC,EAAA,EAAD,CAAkBC,SAAU,CAACtC,OAAOmC,EAAOlC,KAAMD,OAAOmC,EAAO/B,MAAOmC,KAAM,IAAIC,OAAK,CAAEC,QAAuB,QAAdN,EAAOO,IAAgB,oGAAsGC,IAAeC,SAAU,CAAC,GAAI,IAAKC,WAAY,CAAC,GAAI,MAAjR,SACI,eAACC,EAAA,EAAD,oBACWX,EAAOlC,IAAI,uBADtB,SACmCkC,EAAO/B,IAAI,uBAD9C,eACiE+B,EAAOY,kBAAkB,uBAD1F,YAC0GZ,EAAOa,QADjH,KAC2H,uBAD3H,uBACsJb,EAAOc,iBAD7J,IAC+K,uBAD/K,sBACyMd,EAAOe,iBAAiB,uBADjO,YACiPf,EAAOgB,MADxP,IAC+P,uBAD/P,UAC6QhB,EAAOO,IADpR,IACyR,uBADzR,aAC0SP,EAAOiB,OADjT,IACyT,uBADzT,uBACoVjB,EAAOkB,iBAD3V,IAC6W,uBAD7W,cAC+X5D,EAAiB+B,OAAS,EAAI,QAA6B,KAAnB3B,EAAWuC,GAAc,aAAevC,EAAWuC,OAFjdA,aAQnB,cAACkB,EAAA,EAAD","file":"static/js/13.65d5cc71.chunk.js","sourcesContent":["import { CContainer, CRow, CCol } from '@coreui/react'\r\nimport React, { useState } from 'react'\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './leafletStyles.css'\r\nimport { PUBLIC_API } from 'src/config';\r\nimport markerIconPng from \"leaflet/dist/images/marker-icon.png\"\r\nimport { Icon } from 'leaflet'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport sampledata from './sample'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n}));\r\n\r\nconst LiveTracking = () => {\r\n    const classes = useStyles();\r\n    const position = [51.505, -0.09]\r\n    const [previous_devices, setPreviousDevices] = useState(localStorage.getItem('previous_devices')?localStorage.getItem('previous_devices'):[])\r\n    const [devices, setDevices] = useState([])\r\n    const [count, setCount] = useState(0)\r\n    React.useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            PUBLIC_API.get('device/data/last/').then((res) => {\r\n                localStorage.setItem('previous_devices', devices)\r\n                setPreviousDevices(devices)\r\n                setDevices(res.data.data)\r\n            })\r\n        }, 30000);\r\n        return () => clearInterval(interval);\r\n    })\r\n    function getHeading(index) {\r\n        var lat1 = Number(previous_devices[index].lat) * Math.PI / 180;\r\n        var lat2 = Number(devices[index].lat) * Math.PI / 180;\r\n        var dLon = (Number(devices[index].lng) - Number(previous_devices[index].lng)) * Math.PI / 180;\r\n        var y = Math.sin(dLon) * Math.cos(lat2);\r\n        var x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dLon);\r\n\r\n        var brng = Math.atan2(y, x);\r\n\r\n        return (((brng * 180 / Math.PI) + 360) % 360);\r\n    }\r\n    function getBearing(index) {\r\n        var lat1 = Number(previous_devices[index].lat)\r\n        var lat2 = Number(devices[index].lat)\r\n        let lng_distance = Number(devices[index].lng)- Number(previous_devices[index].lng)\r\n        const X =  Math.cos(lat1) * Math.sin(lng_distance)\r\n        const Y = Math.cos(lat2) * Math.sin(lat1) - Math.sin(lat2) * Math.cos(lat1) * Math.cos(lng_distance)\r\n        const B = Math.atan2(X,Y)\r\n        return (((B * 180 / Math.PI) + 360) % 360);\r\n        // const y = Math.sin(λ2 - λ1) * Math.cos(φ2);\r\n        // const x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(λ2 - λ1);\r\n        // const θ = Math.atan2(y, x);\r\n        // const brng = (θ * 180 / Math.PI + 360) % 360;\r\n    }\r\n    return (\r\n        <>\r\n            <div className={classes.root}>\r\n                <CContainer>\r\n                    {devices.length > 0 ? <CRow className=\"justify-content-center\">\r\n                        <CCol>\r\n                            <MapContainer center={[23.6850, 90.3563]} zoom={8} scrollWheelZoom={false}>\r\n                                <TileLayer\r\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                />\r\n                                {devices.length > 0 && Array.from(devices).map((device, idx) =>\r\n                                    <Marker key={idx} position={[Number(device.lat), Number(device.lng)]} icon={new Icon({ iconUrl: device.sos == 'True' ? 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png' : markerIconPng, iconSize: [25, 41], iconAnchor: [12, 41] })}>\r\n                                        <Popup>\r\n                                            Lat : {device.lat}<br />Lng : {device.lng}<br />Device ID : {device.device__device_id}<br />Battery: {device.battery}. <br /> signal_strength1 : {device.signal_strength1} <br /> signal_strength2: {device.signal_strength2}<br /> speed : {device.speed} <br /> sos : {device.sos} <br /> sim_no : {device.sim_no} <br /> locked_satellite : {device.locked_satellite} <br /> heading : {previous_devices.length < 1 ? '(N/A)' : getBearing(idx) == '0' ? 'not moving' : getBearing(idx)}\r\n                                        </Popup>\r\n                                    </Marker>\r\n                                )}\r\n                            </MapContainer>\r\n                        </CCol>\r\n                    </CRow> : <LinearProgress />}\r\n                </CContainer>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LiveTracking"],"sourceRoot":""}